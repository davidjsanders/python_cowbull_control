#!/usr/bin/env bash
source setup_variables
echo ""
echo "Deploy CowBull game to Kubernetes cluster running on Azure"
echo "=========================================================="
echo ""
echo "Configuration will be set as follows:"
echo "-------------------------------------"
echo ""
echo "resource group:   "$rg
echo "cluster name  :   "$clusterName
echo "master count  :   "$masters
echo "agent count   :   "$agents
echo "location      :   "$location
echo "machine type  :   "$machineType
echo "dns prefix    :   "$dnsPrefix
echo "cowbull dns   :   "$publicIpDNS"."$dnsPrefix"."$location".cloudapp.azure.com"
echo "private key   :   "$keyfile
echo ""
read -p "Continue (y for yes, anything else to quit)? " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo "Exiting".
    exit 0
fi
echo ""
echo "1. Remove any existing configuration and services"
kubectl delete configmap cowbull-config --ignore-not-found
kubectl delete \
    -f redis-deploy.yml \
    --ignore-not-found
kubectl delete \
    -f redis-service.yml \
    --ignore-not-found
kubectl delete \
    -f cowbull-deploy.yml \
    --ignore-not-found
kubectl delete \
    -f cowbull-service.yml \
    --ignore-not-found
kubectl delete \
    -f webapp-deploy.yml \
    --ignore-not-found
kubectl delete \
    -f webapp-service.yml \
    --ignore-not-found
echo ""
echo "2. Create configuration map"
kubectl create configmap cowbull-config \
  --from-file=cowbull.cfg
echo ""
echo "3. Deploy Redis"
kubectl create -f redis-service.yml
kubectl create -f redis-deploy.yml
echo ""
echo "4. Deploy CowBull"
kubectl create -f cowbull-service.yml
kubectl create -f cowbull-deploy.yml
echo ""
echo "5. Deploy CowBull web app"
kubectl create -f webapp-deploy.yml
echo ""
echo "6. Setup CowBull web app service"
echo "6.1 Create IP address"
ipaddr=$(az network public-ip create --name $dnsPrefix"-webapp-pip" --dns-name cowbull-azure --allocation-method static --version IPv4 -g $autoGroup -o json | jq -r .publicIp.ipAddress)
echo "6.2 Create service to use IP address: "$ipaddr
kubectl expose deployment webapp --type=LoadBalancer --load-balancer-ip=$ipaddr
echo ""
echo "Done."
echo ""
echo "When you're done:"
echo "1. Run step 3 to remove services    > ./3-remove-services"
echo "2. Run the teardown script          > ./4-spindown-cluster"
echo "3. Verify the group is cleared      > az group list"
echo ""
