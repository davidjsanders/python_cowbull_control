#!/usr/bin/env bash
USAGE_STRING="usage: deploy [-abcdghlmnpqrtADGKFSCT] [-a|--agents agent count] [-b|--disk-size disk size (Google only)]"
USAGE_STRING=$USAGE_STRING" [-c|--mini-cpu number of cpus (Minikube only)] [-g|--group group name] "
USAGE_STRING=$USAGE_STRING" [-l|--location location (Azure location/Google zone)] [-m|--masters master count (deprecated)]"
USAGE_STRING=$USAGE_STRING" [-n|--dns-name dns name] [-p|--pip-name public IP name] "
USAGE_STRING=$USAGE_STRING" [-r|--mini-ram ram (Minikube only)] [-t|--machine-type machine type (Azure and Google)]"

source scripts/v2/showHelp.sh
source scripts/v2/showInfo.sh

function showConfigAzure0 {
    :
}

function showConfigAzure1 {
    echo
    echo "Deploy to Azure                : selected" >&2
    echo "_______________________________________________________________________"
    echo "Group name                     : "${GROUP} >&2
    echo "Cluster name                   : "${CLUSTER} >&2
    echo "Auto group name                : "${AUTOGROUP} >&2
    echo "Resource group location        : "${LOCATION} >&2
    echo "Number of agents               : "${AGENT_COUNT} >&2
    echo "Machine type for agents        : "${MACHINE_TYPE} >&2
    echo "DNS Prefix (Azure only)        : "${DNS_PREFIX} >&2
    echo "PIP Name (Azure only)          : "${PIP_NAME} >&2
}

function showConfigGoogle0 {
    :
}

function showConfigGoogle1 {
    echo
    echo "Deploy to Google               : selected" >&2
    echo "_______________________________________________________________________"
    echo "Cluster name                   : "${CLUSTER} >&2
    echo "Google zone (location)         : "${LOCATION} >&2
    echo "Agent disk size                : "${DISK_SIZE} >&2
    echo "Number of agents               : "${AGENT_COUNT} >&2
    echo "Machine type for agents        : "${MACHINE_TYPE} >&2
}

function showConfigMinikube0 {
    :
}

function showConfigMinikube1 {
    echo
    echo "Deploy to Minikube             : selected" >&2
    echo "_______________________________________________________________________"
    echo "Minikube CPU allocation        : "${MINICPU} >&2
    echo "Minikube RAM allocation        : "${MINIRAM} >&2
}

function showConfig {
    showConfigAzure$EXEAZURE
    showConfigGoogle$EXEGOOGLE
    showConfigMinikube$EXEMINIKUBE

    echo "SSH Key file                   : "${KEYFILE} >&2
    echo
    echo "Debug status                   : "${DEBUG} >&2
    echo "Quiet mode                     : "${QUIET} >&2
    echo "Start execution at stage       : "${START_AT} >&2
    echo -n "Dry run?                       : " >&2
    if [[ $DRYRUN == 1  ]];
    then
        echo "yes" >&2
    else
        echo "no" >&2
    fi
    echo >&2
}

function removeK8Scomponents {
    if (( $DRYRUN == 0 ))
    then
        echo ""
        echo "Dry run - remove services"
        echo "-------------------------"

        echo -n "Deleting configmap:  "
        kubectl delete configmap cowbull-config --ignore-not-found
        echo

        echo -n "Deleting redis deployment:  "
        kubectl delete \
            -f "scripts/redis-deploy.yml" \
            --ignore-not-found
        echo

        echo -n "Deleting redis service:  "
        kubectl delete \
            -f "scripts/redis-service.yml" \
            --ignore-not-found
        echo

        echo -n "Deleting cowbull deployment:  "
        kubectl delete \
            -f "scripts/cowbull-deploy.yml" \
            --ignore-not-found
        echo

        echo -n "Deleting cowbull service:  "
        kubectl delete \
            -f "scripts/cowbull-service.yml" \
            --ignore-not-found
        echo

        echo -n "Deleting webapp deployment:  "
        kubectl delete \
            -f "scripts/webapp-deploy.yml" \
            --ignore-not-found
        echo

        echo -n "Deleting webapp service:  "
        kubectl delete svc webapp --ignore-not-found
        echo
    else
        echo ""
        echo "Dry run - remove services"
        echo "-------------------------"
        echo "kubectl delete configmap cowbull-config --ignore-not-found"
        echo "kubectl delete -f redis-deploy.yml --ignore-not-found"
        echo "kubectl delete -f redis-service.yml --ignore-not-found"
        echo "kubectl delete -f cowbull-deploy.yml --ignore-not-found"
        echo "kubectl delete -f cowbull-service.yml --ignore-not-found"
        echo "kubectl delete -f webapp-deploy.yml --ignore-not-found"
        echo "kubectl delete -f webapp-service.yml --ignore-not-found"
        echo "kubectl delete svc webapp --ignore-not-found"
    fi
}

function deployK8Scomponents {
    if (( $DRYRUN == 0 ))
    then
        echo ""
        echo "Creating services"
        echo "-----------------"

        echo "Creating configmap:  "
        kubectl create configmap cowbull-config \
          --from-file=cowbull.cfg
        echo

        echo -n "Creating redis service:  "
        kubectl create -f scripts/redis-service.yml
        echo

        echo -n "Creating redis deployment:  "
        kubectl create -f scripts/redis-deploy.yml
        echo

        echo -n "Creating cowbull service:  "
        kubectl create -f scripts/cowbull-service.yml
        echo

        echo -n "Creating cowbull deployment:  "
        kubectl create -f scripts/cowbull-deploy.yml
        echo

        echo -n "Creating webapp deployment:  "
        kubectl create -f scripts/webapp-deploy.yml
        echo
    else
        echo ""
        echo "Dry run - Create services"
        echo "-------------------------"
        echo "kubectl create configmap cowbull-config --from-file=cowbull.cfg"
        echo "kubectl create -f redis-service.yml"
        echo "kubectl create -f redis-deploy.yml"
        echo "kubectl create -f cowbull-service.yml"
        echo "kubectl create -f cowbull-deploy.yml"
        echo "kubectl create -f webapp-deploy.yml"
    fi
}

#TODO -> Use the variables to making understanding the options easier
OPTIONS=dfo:vm:
LONGOPTIONS=debug,force,output:,verbose

PARSED=$(\
  getopt \
  --options=ACDFGSTc:r:b:t:p:n:qdhg:m:a:l:k \
  --long=debug,tear-down,deploy-cluster,deploy-all,deploy-services,mini-cpu:,mini-ram:,disk-size:,minikube,pip-name:,dns-name:,machine-type:,quiet,dry-run,azure,google,group:,masters:,agents:,location: \
  --name "Cowbull deployment script" \
  -- "$@"\
)

if [ $? != 0 ];
then
    showHelp
    exit 1
fi

EXEAZURE=0
EXEGOOGLE=0
EXEMINIKUBE=0
DATEFILL=$(date +"%m%d%y")
GROUP="k8"${DATEFILL}"RG"
MASTER_COUNT=1
AGENT_COUNT=1
LOCATION="westus2"
MACHINE_TYPE="Standard_A2"
DNS_PREFIX="dnsprefix"
PIP_NAME="cowbull_webapp"
DEBUG=0
DRYRUN=0
KEYFILE=~/.ssh/id_rsa
QUIET=0
START_AT=1
DISK_SIZE=100
MINIRAM=5192
MINICPU=4
DEPLOYCLUSTER=0
DEPLOYSERVICES=0
DEPLOYFULL=1
TEARDOWN=0

while true; do
    case "$1" in
        -h|--help)
            showHelp
            exit 1
            ;;
        -s|--start-at)
            START_AT=$2
            shift 2
            ;;
        -b|--disk-size)
            DISK_SIZE=$2
            shift 2
            ;;
        -q|--quiet)
            QUIET=1
            shift
            ;;
        -p|--pip-name)
            PIP_NAME=$2
            shift 2
            ;;
        -r|--mini-ram)
            MINIRAM=$2
            shift 2
            ;;
        -c|--mini-cpu)
            MINICPU=$2
            shift 2
            ;;
        -n|--dns-name)
            DNS_PREFIX=$2
            shift 2
            ;;
        -t|--machine-type)
            MACHINE_TYPE=$2
            shift 2
            ;;
        -l|--location)
            LOCATION=$2
            shift 2
            ;;
        -m|--masters)
            MASTER_COUNT=$2
            shift 2
            ;;
        -a|--agents)
            AGENT_COUNT=$2
            shift 2
            ;;
        -d|--debug)
            DEBUG=1
            shift
            ;;
        -A|--azure)
            EXEAZURE=1
            shift
            ;;
        -G|--google)
            EXEGOOGLE=1
            shift
            ;;
        -K|--minikube)
            EXEMINIKUBE=1
            shift
            ;;
        -C|--deploy-cluster)
            DEPLOYCLUSTER=1
            DEPLOYFULL=0
            shift
            ;;
        -S|--deploy-services)
            DEPLOYSERVICES=1
            DEPLOYFULL=0
            shift
            ;;
        -F|--deploy-all)
            DEPLOYCLUSTER=0
            DEPLOYSERVICES=0
            DEPLOYFULL=1
            shift
            ;;
        -T|--tear-down)
            TEARDOWN=1
            shift
            ;;
        -D|--dry-run)
            DRYRUN=1
            shift
            ;;
        -g|--group)
            GROUP=$2
            shift 2
            ;;
        --|\ )
            shift
            break
            ;;
        \?)
            shift
            ;;
        *)
            if [[ $1"X" != "X" ]];
            then
                echo "Unexpected argument: ${1}"
            fi
            break
            ;;
    esac
done

if (( $TEARDOWN == 1 ))
then
    echo >&2
    echo "Tearing down the Python Cowbull suite with the following options:" >&2
    echo "-----------------------------------------------------------------" >&2
else
    echo >&2
    echo "Deploying Python Cowbull suite with the following options:" >&2
    echo "----------------------------------------------------------" >&2
fi

if [[ $DEBUG == 1 ]] ;
then
    echo "" >&2
    echo "*" >&2
    echo "* DEBUG" >&2
    echo "* -----" >&2
    echo "* EXEAZURE:  "$EXEAZURE >&2
    echo "* EXEGOOGLE: "$EXEGOOGLE >&2
    echo "* EXEMINIKUBE: "$EXEMINIKUBE >&2
    echo "* GROUP:     "$GROUP >&2
    echo "* DRY RUN:   "$DRYRUN >&2
    echo "* DEBUG:     "$DEBUG >&2
    echo "*" >&2
    echo "" >&2
fi

CLUSTER=${GROUP}"cluster"
AUTOGROUP="MC_"${GROUP}"_"${CLUSTER}"_"${LOCATION}

showConfig

if [[ $QUIET != 1 ]]
then
    read -p "Continue (y for yes, anything else to quit)? " -n 1 -r
    echo "" >&2
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        echo >&2
        exit 0
    fi
fi

if (( $TEARDOWN == 1 ))
then
    echo ""
    echo "Tearing down Python CowBull game infrastructure"
    echo "==============================================="
    echo ""

    if [[ $EXEAZURE == 1  ]];
    then
        source vendor/Azure/spindown-cluster
        if [ $? != 0  ]; then exit 1; fi
    fi

    if [[ $EXEGOOGLE == 1 ]];
    then
        source vendor/Google/spindown-cluster
        if [ $? != 0  ]; then exit 1; fi
    fi

    if [[ $EXEMINIKUBE == 1 ]];
    then
        source vendor/minikube/spindown-cluster
        if [ $? != 0  ]; then exit 1; fi
    fi

    echo >&2
    echo "-------------------------------------------------------------------------" >&2
    echo "Cluster torn down." >&2
    echo "-------------------------------------------------------------------------" >&2
    echo >&2
    exit 0

else
    if (( $DEPLOYCLUSTER == 1 || $DEPLOYFULL == 1 ))
    then
        echo ""
        echo "Deploying Python CowBull game infrastructure"
        echo "============================================"
        echo ""

        if [[ $EXEAZURE == 1  ]];
        then
            source vendor/Azure/spinup-cluster
            if [ $? != 0  ]; then exit 1; fi
        fi

        if [[ $EXEGOOGLE == 1 ]];
        then
            source vendor/Google/spinup-cluster
            if [ $? != 0  ]; then exit 1; fi
        fi

        if [[ $EXEMINIKUBE == 1 ]];
        then
            source vendor/minikube/spinup-cluster
            if [ $? != 0  ]; then exit 1; fi
        fi

        echo >&2
        echo "-------------------------------------------------------------------------" >&2
        echo "Cluster ready." >&2
        echo "-------------------------------------------------------------------------" >&2
        echo >&2
        showConfig
        echo >&2
    fi

    if (( $DEPLOYSERVICES == 1 || $DEPLOYFULL == 1 ))
    then
        echo ""
        echo "Deploying Python CowBull game configuration, pods, and services"
        echo "==============================================================="
        echo ""

        removeK8Scomponents
        deployK8Scomponents

        azure_option=""
        if (( $EXEAZURE == 1 ));
        then
            if (( $DRYRUN == 0 ));
            then
                ipaddr=$(\
                  az network public-ip create \
                  --name $DNS_PREFIX"-webapp-pip" \
                  --dns-name $PIP_NAME \
                  --allocation-method static \
                  --version IPv4 \
                  -g $AUTOGROUP \
                  -o json | jq -r .publicIp.ipAddress)
                azure_option="--load-balancer-ip="${ipaddr}
            else
                echo
                echo "Dry run - Assign static IP to load balancer."
                echo "--------------------------------------------"
                echo "ipaddr=\$(az network public-ip create --name $DNS_PREFIX"-webapp-pip" --dns-name $PIP_NAME --allocation-method static --version IPv4 -g $AUTOGROUP -o json | jq -r .publicIp.ipAddress)"
                echo "azure_option=--load-balancer-ip=\${ipaddr}"
            fi
        fi

        if (( $DRYRUN != 1 ));
        then
            echo "Creating webapp service"
            kubectl expose deployment webapp --type=LoadBalancer $azure_option
        fi
    fi
fi

echo
echo "Done."
echo

exit 0
