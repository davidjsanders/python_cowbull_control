#!/usr/bin/env bash
#
# ERROR CHECKING *BEFORE* EXECUTION STARTS
#
#
echo ""
echo "Deploy CowBull game to Kubernetes cluster running on GKE"
echo "========================================================"
echo ""
echo "|------------------------------------|--------| "
echo "| Validate environment               | Status |"
echo "|------------------------------------|--------| "

# Check variables are defined
echo -n "| Variables have been defined okay   | "
if [[ $GROUP"X" == "X"  ]];
then
    echo " FAIL  |"
    echo
    echo "Error; the variables are not set. This script must ONLY be called"
    echo "       using the deploy script. Please run deploy in the root of"
    echo "       the python_cowbull_control installation directory." 
    echo
    return 1
fi
echo "  ok   |"

gcloudpath=$(which gcloud)"x"
echo -n "| gcloud cli is installed            | "
if [[ $gcloudpath == "x" ]]
then
    echo " FAIL  |"
    echo ""
    echo "Error; the gcloud CLI (version 2.0+) must be installed. "
    echo "See https://cloud.google.com/sdk/docs/#install_the_latest_cloud_tools_version_cloudsdk_current_version "
    echo ""
    return 1
fi
echo "  ok   |"

echo -n "| private key is available           | "
if [ ! -f ~/.ssh/id_rsa ]
then
    echo " FAIL  |"
    echo ""
    echo "Error; there is no id_rsa private key in the .ssh subdirectory"
    echo "You need to create it. Do the following:"
    echo ""
    echo "1. cd ~/.ssh"
    echo "2. ssh-keygen -b 4096 -t rsa"
    echo ""
    echo "(In step 2, make sure to accept the default id_rsa)"
    echo ""
    return 1
fi
echo "  ok   |"

echo -n "| Check gcloud auth active user set  | "
gcloudauth=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")"x"
if [[ $gcloudauth == "x" ]]
then
    echo " FAIL  |"
    echo ""
    echo "Error; the gcloud SDK is not authorised."
    echo "Please execute 'gcloud auth login ...' before proceeding."
    echo ""
    return 1
fi
echo "  ok   |"

echo -n "| Check project is set in SDK        | "
gcloudproject=$(gcloud config list project --format=flattened)"x"
if [[ $gcloudauth == "x" ]]
then
    echo " FAIL  |"
    echo ""
    echo "Error; the gcloud SDK default project is not set."
    echo "Please execute 'gcloud config set project ...' before proceeding."
    echo ""
    return 1
fi
echo "  ok   |"

echo -n "| Checking ssh is running correctly  | "
sshAgent=$(ps -ef | grep "ssh-agent" | grep -v grep)"x"
if [[ $sshAgent == "x" ]]
then
    echo " FAIL  |"
    echo ""
    echo "Error; ssh is not running. Run the following command before running..."
    echo "eval "$(ssh-agent -s)""
    echo ""
    return 1
fi
echo "  ok   |"

echo "|------------------------------------|--------| "
echo ""
echo ""
echo "Configuration will be set as follows:"
echo "-------------------------------------"
echo ""
echo "resource group:   "$GROUP
echo "cluster name  :   "$CLUSTER
echo "master count  :   "$MASTER_COUNT
echo "agent count   :   "$AGENT_COUNT
echo "location      :   "$LOCATION
echo "machine type  :   "$MACHINE_TYPE
echo "dns prefix    :   "$DNS_PREFIX
echo "cowbull dns   :   "$PIP_NAME"."$DNS_PREFIX"."$LOCATION".cloudapp.azure.com"
echo "private key   :   "$KEYFILE
echo ""

if [[ $DRYRUN == 1  ]]
then
    echo
    echo "Dry Run - No implementation"
    echo
fi

echo ""
echo "1. Create the cluster. --resource-group "$GROUP" --name "$CLUSTER" --agent-count "$AGENT_COUNT" --agent-vm-size "$MACHINE_TYPE
echo ""
echo "gcloud container clusters create $CLUSTER --disk-size 100 --zone $LOCATION --enable-cloud-logging --enable-cloud-monitoring --machine-type $MACHINE_TYPE --num-nodes $AGENT_COUNT"
if [[ $DRYRUN != 1  ]]
then
    gcloud container clusters create $CLUSTER \
      --disk-size $DISK_SIZE \
      --zone $LOCATION \
      --enable-cloud-logging \
      --enable-cloud-monitoring \
      --machine-type $MACHINE_TYPE \
      --num-nodes $AGENT_COUNT
    echo
else
    echo "... dry run only"
fi

echo ""
echo "2. Add your private key ("$KEYFILE")"
echo ""
echo -n "ssh-add -k $KEYFILE "
if [[ $DRYRUN != 1  ]]
then
    ssh-add -k $KEYFILE
    echo
else
    echo "... dry run only"
fi

echo ""
echo "3. Get kubernetes credentials to configure kubectl"
echo ""
echo -n "gcloud container clusters get-credentials $CLUSTER"
if [[ $DRYRUN != 1  ]]
then
    gcloud container clusters get-credentials $CLUSTER --zone=$LOCATION
    echo
else
    echo "... dry run only"
fi

echo ""
echo "Done."
echo ""
