#!/usr/bin/env bash
#
# ERROR CHECKING *BEFORE* EXECUTION STARTS
#
#
echo ""
echo "Deploy to Azure Kubernete Services"
echo "=================================="
echo ""
echo "|------------------------------------|--------| "
echo "| Validate environment               | Status |"
echo "|------------------------------------|--------| "

# Check variables are defined
echo -n "| Variables have been defined okay   | "
if [[ $GROUP"X" == "X"  ]];
then
    echo " FAIL  |"
    echo
    echo "Error; the variables are not set. This script must ONLY be called"
    echo "       using the deploy script. Please run deploy in the root of"
    echo "       the python_cowbull_control installation directory." 
    echo
    return 1
fi
echo "  ok   |"

azpath=$(which az)"x"
echo -n "| azure cli is installed             | "
if [[ $azpath == "x" ]]
then
    echo " FAIL  |"
    echo ""
    echo "Error; the Azure CLI (version 2.0+) must be installed. "
    echo "See https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latesti "
    echo ""
    return 1
fi
echo "  ok   |"

echo -n "| private key is available           | "
if [ ! -f ~/.ssh/id_rsa ]
then
    echo " FAIL  |"
    echo ""
    echo "Error; there is no id_rsa private key in the .ssh subdirectory"
    echo "You need to create it. Do the following:"
    echo ""
    echo "1. cd ~/.ssh"
    echo "2. ssh-keygen -b 4096 -t rsa"
    echo ""
    echo "(In step 2, make sure to accept the default id_rsa)"
    echo ""
    return 1
fi
echo "  ok   |"

echo -n "| Checking group does not exist      | "
groupCheck=$(az group list --query '[?name==`$GROUP`]|[?location==`$LOCATION`].name' --output tsv)"x"
if [[ $groupCheck != "x" ]]
then
    echo " FAIL  |"
    echo ""
    echo "Error; the group ("$GROUP") in location "$LOCATION" already exists!"
    echo "Remove the group before proceeding"
    echo ""
    return 1
fi
echo "  ok   |"

echo -n "| Checking ssh is running correctly  | "
sshAgent=$(ps -ef | grep "ssh-agent" | grep -v grep)"x"
if [[ $sshAgent == "x" ]]
then
    echo " FAIL  |"
    echo ""
    echo "Error; ssh is not running. Run the following command before running..."
    echo "eval "$(ssh-agent -s)""
    echo ""
    return 1
fi
echo "  ok   |"

echo "|------------------------------------|--------| "
echo ""
echo ""
echo "Configuration will be set as follows:"
echo "-------------------------------------"
echo ""
echo "resource group:   "$GROUP
echo "cluster name  :   "$CLUSTER
echo "master count  :   "$MASTER_COUNT
echo "agent count   :   "$AGENT_COUNT
echo "location      :   "$LOCATION
echo "machine type  :   "$MACHINE_TYPE
echo "dns prefix    :   "$DNS_PREFIX
echo "cowbull dns   :   "$PIP_NAME"."$DNS_PREFIX"."$LOCATION".cloudapp.azure.com"
echo "private key   :   "$KEYFILE
echo ""
if [[ $DRYRUN == 1  ]]
then
    echo
    echo "Dry Run - No implementation"
    echo
fi

echo ""
echo "1. Create the resource group"$GROUP
echo ""
echo -n "az group create --name $GROUP --location $LOCATION "
if [[ $DRYRUN != 1  ]]
then
    az group create --name $GROUP --location $LOCATION
    echo
else
    echo "... dry run only"
fi

echo ""
echo "2. Create the cluster. --resource-group "$GROUP" --name "$CLUSTER" --agent-count "$AGENT_COUNT" --agent-vm-size "$MACHINE_TYPE
echo ""
echo -n "az aks create --resource-group $GROUP --name $CLUSTER --generate-ssh-keys --agent-count $AGENT_COUNT --agent-vm-size $MACHINE_TYPE "
if [[ $DRYRUN != 1  ]]
then
    az aks create \
      --resource-group $GROUP \
      --name $CLUSTER \
      --generate-ssh-keys \
      --dns-name-prefix $DNS_PREFIX \
      --kubernetes-version 1.8.1 \
      --agent-count $AGENT_COUNT \
      --agent-vm-size $MACHINE_TYPE
    echo
else
    echo "... dry run only"
fi

echo ""
echo "3. Add your private key ("$KEYFILE")"
echo ""
echo -n "ssh-add -k $KEYFILE "
if [[ $DRYRUN != 1  ]]
then
    ssh-add -k $KEYFILE
    echo
else
    echo "... dry run only"
fi

echo ""
echo "4. Get kubernetes credentials to configure kubectl"
echo ""
echo -n "az aks get-credentials --resource-group=$GROUP --name=$CLUSTER "
if [[ $DRYRUN != 1  ]]
then
    az aks get-credentials --resource-group=$GROUP --name=$CLUSTER
    echo
else
    echo "... dry run only"
fi

echo ""
echo "Done."
echo ""
